+++++++++++++++++++++++++++++++++++++++++++++
++++++++++       REPORT INFO       ++++++++++
+++++++++++++++++++++++++++++++++++++++++++++


SUMMARY
===============================================
|     Property     |          Value           |
===============================================
| User             | runner                   |
| Host             | ca551a73491f             |
| Tool             | Riviera-PRO 2022.04      |
| Report file      | /home/runner/sbm_cov.txt |
| Report date      | 2023-09-29 15:51         |
| Report arguments | -verbose                 |
| Input file       | simulation session       |
| Input file date  | simulation session       |
| Number of tests  | 1                        |
===============================================


TEST DETAILS
==============================================
| Property |              Value              |
==============================================
| Test     | work.acdb:work                  |
| Status   | Ok                              |
| Args     | asim +access+r -dbg -acdb       |
| Simtime  | 570 ns                          |
| Cputime  | 0.371 s                         |
| Seed     | 1                               |
| Date     | 2023-09-29 15:51                |
| User     | runner                          |
| Host     | ca551a73491f                    |
| Host os  | Linux64                         |
| Tool     | Riviera-PRO 2022.04 (simulator) |
==============================================


+++++++++++++++++++++++++++++++++++++++++++++
++++++++++     DESIGN HIERARCHY    ++++++++++
+++++++++++++++++++++++++++++++++++++++++++++


CUMULATIVE SUMMARY
============================================
|   Coverage Type    | Weight | Hits/Total |
============================================
| Statement Coverage |      1 |    73.099% |
|--------------------|--------|------------|
| Statements         |        |  125 / 171 |
| Subprograms        |        |    24 / 45 |
============================================
| Branch Coverage    |      1 |    51.666% |
|--------------------|--------|------------|
| Branch paths       |        |    31 / 60 |
| Branches           |        |     9 / 26 |
============================================
| Assertion Coverage |      1 |   100.000% |
|--------------------|--------|------------|
| Assertions         |        |      4 / 4 |
| Covers             |        |      2 / 2 |
============================================
CUMULATIVE INSTANCE-BASED COVERAGE: 74.922%
COVERED INSTANCES: 2 / 9
FILES: 9


INSTANCE - /tb_top : work.tb_top


    SUMMARY
    =========================================================================
    |   Coverage Type    | Weight | Local Hits/Total | Recursive Hits/Total |
    =========================================================================
    | Statement Coverage |      1 |         100.000% |             100.000% |
    |--------------------|--------|------------------|----------------------|
    | Statements         |        |            7 / 7 |              46 / 46 |
    | Subprograms        |        |            0 / 0 |                0 / 0 |
    =========================================================================
    | Branch Coverage    |      1 |      No branches |             100.000% |
    |--------------------|--------|------------------|----------------------|
    | Branch paths       |        |            0 / 0 |              22 / 22 |
    | Branches           |        |            0 / 0 |                7 / 7 |
    =========================================================================
    | Assertion Coverage |      1 |    No assertions |             100.000% |
    |--------------------|--------|------------------|----------------------|
    | Assertions         |        |            0 / 0 |                3 / 3 |
    | Covers             |        |            0 / 0 |                2 / 2 |
    =========================================================================
    WEIGHTED AVERAGE LOCAL: 100.000%
    WEIGHTED AVERAGE RECURSIVE: 100.000%


    STATEMENT COVERAGE
    ==============================================================================================================================================
    | Line | Hits |                                                     Source: testbench.sv                                                     |
    |------|------|------------------------------------------------------------------------------------------------------------------------------|
    | 20   |      |     //Registers the Interface in the configuration block                                                                     |
    | 21   |      |     //so that other blocks can use it                                                                                        |
    | 22   |  1   |     uvm_resource_db#(virtual fizzbuzz_intf)::set(.scope("ifs"), .name("fizzbuzz_intf"),                         .val(intf)); |
    | 23   |      |                                                                                                                              |
    | 24   |  1   |     uvm_resource_db #(int)::set("*", "g_length", G_LENGTH);                                                                  |
    | 25   |      |                                                                                                                              |
    | 26   |      |                                                                                                                              |
    | 27   |      |     //Executes the test                                                                                                      |
    | 28   |  1   |     run_test("test");                                                                                                        |
    | 29   |      |   end                                                                                                                        |
    | 30   |      |                                                                                                                              |
    | 31   |      |   //Variable initialization                                                                                                  |
    | 32   |      |   initial begin                                                                                                              |
    | 33   |  1   |     intf.i_clk = 1'b1;                                                                                                       |
    | 34   |      |     // Dump waves                                                                                                            |
    | 35   |  1   |     $dumpfile("dump.vcd");                                                                                                   |
    | 36   |  1   |     $dumpvars(0, tb_top);                                                                                                    |
    | 37   |      |   end                                                                                                                        |
    | 38   |      |                                                                                                                              |
    | 39   |      |   //Clock generation                                                                                                         |
    | 40   |      |   always                                                                                                                     |
    | 41   | 114  |     #5 intf.i_clk = ~intf.i_clk;                                                                                             |
    | 42   |      | endmodule : tb_top                                                                                                           |
    ==============================================================================================================================================


INSTANCE - /tb_top/dut : work.fizzbuzz


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |   100.000% |
    |--------------------|--------|------------|
    | Statements         |        |    39 / 39 |
    | Subprograms        |        |      0 / 0 |
    ============================================
    | Branch Coverage    |      1 |   100.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |    22 / 22 |
    | Branches           |        |      7 / 7 |
    ============================================
    | Assertion Coverage |      1 |   100.000% |
    |--------------------|--------|------------|
    | Assertions         |        |      3 / 3 |
    | Covers             |        |      2 / 2 |
    ============================================
    WEIGHTED AVERAGE LOCAL: 100.000%


    STATEMENT COVERAGE
    ============================================================================================================================================
    | Line | Hits |                                                     Source: design.sv                                                      |
    |------|------|----------------------------------------------------------------------------------------------------------------------------|
    | 26   |      |         logic start;                                                                                                       |
    | 27   |      |                                                                                                                            |
    | 28   |  58  |         if(i_rst) begin                                                                                                    |
    | 29   |  1   |             cnt <= 0;                                                                                                      |
    | 30   |  1   |             state_fizz <= idle_fizz;                                                                                       |
    | 31   |  1   |             state_buzz <= idle_buzz;                                                                                       |
    | 32   |  1   |             start = 1'b0;                                                                                                  |
    | 33   |      |                                                                                                                            |
    | 34   |  1   |             o_is_fizz <= 1'b0;                                                                                             |
    | 35   |  1   |             o_is_buzz <= 1'b0;                                                                                             |
    | 36   |      |         end else begin                                                                                                     |
    | 37   |      |                                                                                                                            |
    | 38   |  57  |             o_is_fizz <= 1'b0;                                                                                             |
    | 39   |  57  |             case (state_fizz)                                                                                              |
    | 40   |      |                 idle_fizz : begin                                                                                          |
    | 41   |  3   |                     if(i_en) begin                                                                                         |
    | 42   |  2   |                         start = 1'b1;                                                                                      |
    | 43   |  2   |                         state_fizz <= fizz_1;                                                                              |
    | 44   |      |                     end else                                                                                               |
    | 45   |  1   |                         start = 1'b0;                                                                                      |
    | 46   |      |                 end                                                                                                        |
    | 47   |      |                                                                                                                            |
    | 48   |      |                 fizz_1 :                                                                                                   |
    | 49   |  18  |                     state_fizz <= fizz_2;                                                                                  |
    | 50   |      |                 fizz_2 : begin                                                                                             |
    | 51   |  18  |                     o_is_fizz <= 1'b1;                                                                                     |
    | 52   |  18  |                     state_fizz <= fizz_3;                                                                                  |
    | 53   |      |                 end                                                                                                        |
    | 54   |      |                 fizz_3 :                                                                                                   |
    | 55   |  17  |                     state_fizz <= fizz_1;                                                                                  |
    | 56   |      |                 default :                                                                                                  |
    | 57   |  1   |                     state_fizz <= idle_fizz;                                                                               |
    | 58   |      |             endcase                                                                                                        |
    | 59   |      |                                                                                                                            |
    | 60   |  57  |             o_is_buzz <= 1'b0;                                                                                             |
    | 61   |  57  |             case (state_buzz)                                                                                              |
    | 62   |      |                 idle_buzz : begin                                                                                          |
    | 63   |  3   |                     if(i_en) begin                                                                                         |
    | 64   |  2   |                         start = 1'b1;                                                                                      |
    | 65   |  2   |                         state_buzz <= buzz_1;                                                                              |
    | 66   |      |                     end else                                                                                               |
    | 67   |  1   |                         start = 1'b0;                                                                                      |
    | 68   |      |                 end                                                                                                        |
    | 69   |      |                 buzz_1 :                                                                                                   |
    | 70   |  11  |                     state_buzz <= buzz_2;                                                                                  |
    | 71   |      |                 buzz_2 :                                                                                                   |
    | 72   |  11  |                     state_buzz <= buzz_3;                                                                                  |
    | 73   |      |                 buzz_3 :                                                                                                   |
    | 74   |  11  |                     state_buzz <= buzz_4;                                                                                  |
    | 75   |      |                 buzz_4 : begin                                                                                             |
    | 76   |  10  |                     o_is_buzz <= 1'b1;                                                                                     |
    | 77   |  10  |                     state_buzz <= buzz_5;                                                                                  |
    | 78   |      |                 end                                                                                                        |
    | 79   |      |                 buzz_5 :                                                                                                   |
    | 80   |  10  |                     state_buzz <= buzz_1;                                                                                  |
    | 81   |      |                 default :                                                                                                  |
    | 82   |  1   |                     state_buzz <= idle_buzz;                                                                               |
    | 83   |      |             endcase                                                                                                        |
    | 84   |      |                                                                                                                            |
    | 85   |  57  |             if(start) begin                                                                                                |
    | 86   |  55  |                 if(32'(cnt) < G_LENGTH)                                                                                    |
    | 87   |  54  |                     cnt <= cnt + 1;                                                                                        |
    | 88   |      |                 else begin                                                                                                 |
    | 89   |  1   |                     cnt <= '0;                                                                                             |
    | 90   |  1   |                     state_fizz <= idle_fizz;                                                                               |
    | 91   |  1   |                     state_buzz <= idle_buzz;                                                                               |
    | 92   |      |                 end                                                                                                        |
    | 93   |      |             end else                                                                                                       |
    | 94   |  2   |                 cnt <= '0;                                                                                                 |
    | 95   |      |         end                                                                                                                |
    | 96   |      |     end                                                                                                                    |
    | 97   |      |                                                                                                                            |
    | 98   |  57  |     assign o_number = cnt;                                                                                                 |
    | 99   |      |                                                                                                                            |
    | 100  |      |     check_fizz : assert property (@(posedge i_clk) disable iff(i_rst) (o_number > 0) && (o_number %3 == 0) |-> o_is_fizz); |
    ============================================================================================================================================


    BRANCH COVERAGE
    ============================
    |    Source: design.sv     |
    ============================
    | Branch/Line       | Hits |
    ============================
    | IF branch#28#1#   |  2/2 |
    |     if_branch     |    1 |
    |     else_branch   |   57 |
    |-------------------|------|
    | CASE branch#39#1# |  5/5 |
    |     true#40#1#    |    3 |
    |     true#48#1#    |   18 |
    |     true#50#1#    |   18 |
    |     true#54#1#    |   17 |
    |     true#56#1#    |    1 |
    |-------------------|------|
    | IF branch#41#1#   |  2/2 |
    |     if_branch     |    2 |
    |     else_branch   |    1 |
    |-------------------|------|
    | CASE branch#61#1# |  7/7 |
    |     true#62#1#    |    3 |
    |     true#69#1#    |   11 |
    |     true#71#1#    |   11 |
    |     true#73#1#    |   11 |
    |     true#75#1#    |   10 |
    |     true#79#1#    |   10 |
    |     true#81#1#    |    1 |
    |-------------------|------|
    | IF branch#63#1#   |  2/2 |
    |     if_branch     |    2 |
    |     else_branch   |    1 |
    |-------------------|------|
    | IF branch#85#1#   |  2/2 |
    |     if_branch     |   55 |
    |     else_branch   |    2 |
    |-------------------|------|
    | IF branch#86#1#   |  2/2 |
    |     if_branch     |   54 |
    |     else_branch   |    1 |
    ============================


    ASSERTION COVERAGE
    =========================================================
    |        Name        |     Source     | Failed | Passed |
    |--------------------|----------------|--------|--------|
    | check_fizz         | design.sv(100) |      0 |     16 |
    | check_buzz         | design.sv(101) |      0 |     10 |
    | check_number_range | design.sv(102) |      0 |      2 |
    =========================================================


    COVER COVERAGE
    =======================================
    |    Name     |     Source     | Hits |
    |-------------|----------------|------|
    | cover_en    | design.sv(104) |    1 |
    | cover_range | design.sv(105) |    1 |
    =======================================


CLASS - /\package testbench_pkg\/rand_sequence : work.testbench_pkg/\testbench_pkg rand_sequence \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    33.333% |
    |--------------------|--------|------------|
    | Statements         |        |     7 / 21 |
    | Subprograms        |        |      3 / 7 |
    ============================================
    | Branch Coverage    |      1 |     0.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |     0 / 10 |
    | Branches           |        |      0 / 5 |
    ============================================
    | Assertion Coverage |      1 |   100.000% |
    |--------------------|--------|------------|
    | Assertions         |        |      1 / 1 |
    ============================================
    WEIGHTED AVERAGE LOCAL: 44.444%


    STATEMENT COVERAGE
    ===========================================================================================================================================================================
    | Line |                           Hits                            |                                         Source: sequence.sv                                          |
    |------|-----------------------------------------------------------|------------------------------------------------------------------------------------------------------|
    | 1    |                                                           | import pkg::*;                                                                                       |
    | 2    |                                                           | class rand_sequence extends uvm_sequence;                                                            |
    | 3    | UNR,UNR,UNR,UNR,UNR,UNR,1,UNR,UNR,UNR,UNR,UNR,UNR,UNR,UNR |   `uvm_object_utils(rand_sequence)                                                                   |
    | 4    |                                                           |                                                                                                      |
    | 5    |                                                           |   sequence_item #(pkg::G_LENGTH) sa_tx;                                                              |
    | 6    |                                                           | //   covergroup cg;                                                                                  |
    | 7    |                                                           |                                                                                                      |
    | 8    |                                                           | //     A:   coverpoint sa_tx.i_A;                                                                    |
    | 9    |                                                           | //     B:   coverpoint sa_tx.i_B;                                                                    |
    | 10   |                                                           | //   endgroup: cg                                                                                    |
    | 11   |                                                           |                                                                                                      |
    | 12   |                                                           |   function new(string name = "");                                                                    |
    | 13   |                             1                             |     super.new(name);                                                                                 |
    | 14   |                                                           | //     cg = new();                                                                                   |
    | 15   |                                                           |   endfunction                                                                                        |
    | 16   |                                                           |                                                                                                      |
    | 17   |                                                           |   task body();                                                                                       |
    | 18   |                                                           |                                                                                                      |
    | 19   |                             1                             |     repeat(pkg::G_LENGTH) begin                                                                      |
    | 20   |                                                           | //     while(cg.get_coverage != 100.0) begin                                                         |
    | 21   |                            50                             |       sa_tx = sequence_item #(pkg::G_LENGTH)::type_id::create("sa_tx");                              |
    | 22   |                            50                             |       start_item(sa_tx);                                                                             |
    | 23   |                            50                             |       assert(sa_tx.randomize());                                                                     |
    | 24   |                                                           | //       cg.sample();                                                                                |
    | 25   |                            50                             |       finish_item(sa_tx);                                                                            |
    | 26   |                                                           | //       `uvm_info(get_type_name(), $sformatf("Current Coverage = %0f", cg.get_coverage()), UVM_LOW) |
    | 27   |                                                           |     end                                                                                              |
    ===========================================================================================================================================================================


    BRANCH COVERAGE
    ===============================
    |     Source: sequence.sv     |
    ===============================
    | Branch/Line          | Hits |
    ===============================
    | IF branch#3#1#       |  0/2 |
    |     if_branch        |    0 |
    |     else_branch      |    0 |
    |----------------------|------|
    | IF branch#3#2#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#3#3#       |  0/2 |
    |     if_branch        |    0 |
    |     else_branch      |    0 |
    |----------------------|------|
    | IF branch#3#4#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#3#5#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    ===============================


    ASSERTION COVERAGE
    =======================================================
    |      Name       |     Source      | Failed | Passed |
    |-----------------|-----------------|--------|--------|
    | @IMM_ASSERT#23@ | sequence.sv(23) |      0 |     50 |
    =======================================================


CLASS - /\package testbench_pkg\/driver : work.testbench_pkg/\testbench_pkg driver \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    83.333% |
    |--------------------|--------|------------|
    | Statements         |        |    15 / 18 |
    | Subprograms        |        |      4 / 7 |
    ============================================
    | Branch Coverage    |      1 |   100.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |      2 / 2 |
    | Branches           |        |      1 / 1 |
    ============================================
    WEIGHTED AVERAGE LOCAL: 91.666%


    STATEMENT COVERAGE
    =============================================================================================================================================
    | Line |    Hits     |                                                  Source: driver.sv                                                   |
    |------|-------------|----------------------------------------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                                                       |
    | 2    |             | class driver extends uvm_driver #(sequence_item #(pkg::G_LENGTH));                                                   |
    | 3    | UNR,UNR,UNR |   `uvm_component_utils(driver)                                                                                       |
    | 4    |             |                                                                                                                      |
    | 5    |             |   virtual fizzbuzz_intf intf;                                                                                        |
    | 6    |             |                                                                                                                      |
    | 7    |             |   function new (string name = "", uvm_component parent);                                                             |
    | 8    |      1      |     super.new(name,parent);                                                                                          |
    | 9    |             |   endfunction                                                                                                        |
    | 10   |             |                                                                                                                      |
    | 11   |             |   function void build_phase(uvm_phase phase);                                                                        |
    | 12   |      1      |     super.build_phase(phase);                                                                                        |
    | 13   |      1      |     void'(uvm_resource_db#(virtual fizzbuzz_intf)::read_by_name(.scope("ifs"), .name("fizzbuzz_intf"), .val(intf))); |
    | 14   |             |   endfunction                                                                                                        |
    | 15   |             |                                                                                                                      |
    | 16   |             |   virtual task reset_phase(uvm_phase phase);                                                                         |
    | 17   |      1      |     phase.raise_objection(this);                                                                                     |
    | 18   |      1      |     intf.i_rst = 1'b1;                                                                                               |
    | 19   |             |                                                                                                                      |
    | 20   |      1      |     repeat(5)                                                                                                        |
    | 21   |             |       @(posedge intf.i_clk)                                                                                          |
    | 22   |      5      |     intf.i_rst = 1'b0;                                                                                               |
    | 23   |      1      |     phase.drop_objection(this);                                                                                      |
    | 24   |             |   endtask: reset_phase                                                                                               |
    | 25   |             |                                                                                                                      |
    | 26   |             |                                                                                                                      |
    | 27   |             |   virtual task run_phase(uvm_phase phase);                                                                           |
    | 28   |             |     sequence_item #(pkg::G_LENGTH) req_item;                                                                         |
    | 29   |             |                                                                                                                      |
    | 30   |      1      |     forever begin                                                                                                    |
    | 31   |     53      |       if(!intf.i_rst) begin                                                                                          |
    | 32   |     51      |           seq_item_port.get_next_item(req_item);                                                                     |
    | 33   |     50      |           intf.i_en <= 1'b1;                                                                                         |
    | 34   |     50      |           @(posedge intf.i_clk);                                                                                     |
    | 35   |     50      |           seq_item_port.item_done();                                                                                 |
    | 36   |             |       end else                                                                                                       |
    | 37   |      2      |         @(posedge intf.i_clk);                                                                                       |
    | 38   |             |     end                                                                                                              |
    | 39   |             |   endtask                                                                                                            |
    =============================================================================================================================================


    BRANCH COVERAGE
    ==========================
    |   Source: driver.sv    |
    ==========================
    | Branch/Line     | Hits |
    ==========================
    | IF branch#31#1# |  2/2 |
    |     if_branch   |   51 |
    |     else_branch |    2 |
    ==========================


CLASS - /\package testbench_pkg\/monitor_out : work.testbench_pkg/\testbench_pkg monitor_out \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    90.909% |
    |--------------------|--------|------------|
    | Statements         |        |    20 / 22 |
    | Subprograms        |        |      4 / 6 |
    ============================================
    | Branch Coverage    |      1 |    66.666% |
    |--------------------|--------|------------|
    | Branch paths       |        |      4 / 6 |
    | Branches           |        |      1 / 3 |
    ============================================
    WEIGHTED AVERAGE LOCAL: 78.787%


    STATEMENT COVERAGE
    ===================================================================================================================================================================================================
    | Line |    Hits     |                                                                           Source: monitor_out.sv                                                                           |
    |------|-------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                                                                                                             |
    | 2    |             | class monitor_out extends uvm_monitor;                                                                                                                                     |
    | 3    | UNR,UNR,222 |   `uvm_component_utils(monitor_out)                                                                                                                                        |
    | 4    |             |                                                                                                                                                                            |
    | 5    |             |   uvm_analysis_port #(sequence_item #(pkg::G_LENGTH)) mon_out;                                                                                                             |
    | 6    |             |   virtual fizzbuzz_intf intf;                                                                                                                                              |
    | 7    |             |   sequence_item #(pkg::G_LENGTH) datum;                                                                                                                                    |
    | 8    |             |                                                                                                                                                                            |
    | 9    |             |   function new (string name = "", uvm_component parent);                                                                                                                   |
    | 10   |      1      |     super.new(name,parent);                                                                                                                                                |
    | 11   |             |                                                                                                                                                                            |
    | 12   |             |   endfunction : new                                                                                                                                                        |
    | 13   |             |                                                                                                                                                                            |
    | 14   |             |                                                                                                                                                                            |
    | 15   |             |   function void build_phase(uvm_phase phase);                                                                                                                              |
    | 16   |      1      |     super.build_phase(phase);                                                                                                                                              |
    | 17   |      1      |     void'(uvm_resource_db#(virtual fizzbuzz_intf)::read_by_name(.scope("ifs"), .name("fizzbuzz_intf"), .val(intf)));                                                       |
    | 18   |             |                                                                                                                                                                            |
    | 19   |      1      |     mon_out = new ("mon_out",this);                                                                                                                                        |
    | 20   |             |   endfunction: build_phase                                                                                                                                                 |
    | 21   |             |                                                                                                                                                                            |
    | 22   |             |   virtual task run_phase(uvm_phase phase);                                                                                                                                 |
    | 23   |             |                                                                                                                                                                            |
    | 24   |      1      |     forever begin                                                                                                                                                          |
    | 25   |     58      |       if(!intf.i_rst) begin                                                                                                                                                |
    | 26   |     56      |         datum = sequence_item #(G_LENGTH)::type_id::create("datum",this);                                                                                                  |
    | 27   |     56      |         datum.o_is_fizz <= intf.o_is_fizz;                                                                                                                                 |
    | 28   |     56      |         datum.o_is_buzz <= intf.o_is_buzz;                                                                                                                                 |
    | 29   |     56      |         datum.o_number <= intf.o_number;                                                                                                                                   |
    | 30   |             |                                                                                                                                                                            |
    | 31   |  56,56,56   |         `uvm_info(get_type_name(),$sformatf("intf OUT  o_is_fizz = 0x%0h, o_is_buzz = 0x%0h,     o_number=0x%0h",intf.o_is_fizz,intf.o_is_buzz,intf.o_number),UVM_LOW)     |
    | 32   |     56      |         @(posedge intf.i_clk);                                                                                                                                             |
    | 33   |  55,55,55   |         `uvm_info(get_type_name(),$sformatf("datum OUT  o_is_fizz = 0x%0h, o_is_buzz = 0x%0h,     o_number=0x%0h",datum.o_is_fizz,datum.o_is_buzz,datum.o_number),UVM_LOW) |
    | 34   |     55      |       mon_out.write(datum);                                                                                                                                                |
    | 35   |             |       end else                                                                                                                                                             |
    | 36   |      2      |         @(posedge intf.i_clk);                                                                                                                                             |
    | 37   |             |     end                                                                                                                                                                    |
    | 38   |             |   endtask : run_phase                                                                                                                                                      |
    ===================================================================================================================================================================================================


    BRANCH COVERAGE
    ===============================
    |   Source: monitor_out.sv    |
    ===============================
    | Branch/Line          | Hits |
    ===============================
    | IF branch#25#1#      |  2/2 |
    |     if_branch        |   56 |
    |     else_branch      |    2 |
    |----------------------|------|
    | IF branch#31#1#      |  1/2 |
    |     if_branch        |   56 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#33#1#      |  1/2 |
    |     if_branch        |   55 |
    |     all_false_branch |    0 |
    ===============================


CLASS - /\package testbench_pkg\/scoreboard : work.testbench_pkg/\testbench_pkg scoreboard \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    68.000% |
    |--------------------|--------|------------|
    | Statements         |        |    17 / 25 |
    | Subprograms        |        |      4 / 7 |
    ============================================
    | Branch Coverage    |      1 |    30.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |     3 / 10 |
    | Branches           |        |      0 / 5 |
    ============================================
    WEIGHTED AVERAGE LOCAL: 49.000%


    STATEMENT COVERAGE
    =========================================================================================================================================================================
    | Line |    Hits     |                                                              Source: scoreboard.sv                                                               |
    |------|-------------|--------------------------------------------------------------------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                                                                                   |
    | 2    |             | class scoreboard extends uvm_scoreboard;                                                                                                         |
    | 3    | UNR,UNR,110 |   `uvm_component_utils(scoreboard)                                                                                                               |
    | 4    |             |                                                                                                                                                  |
    | 5    |             |   function new(string name = "", uvm_component parent);                                                                                          |
    | 6    |      1      |     super.new(name,parent);                                                                                                                      |
    | 7    |             |   endfunction : new                                                                                                                              |
    | 8    |             |                                                                                                                                                  |
    | 9    |             |   uvm_tlm_analysis_fifo #(sequence_item #(pkg::G_LENGTH)) fifo_out;                                                                              |
    | 10   |             |                                                                                                                                                  |
    | 11   |             |   uvm_get_port #(sequence_item #(pkg::G_LENGTH)) result_get_port;                                                                                |
    | 12   |             |                                                                                                                                                  |
    | 13   |             |   sequence_item #(pkg::G_LENGTH) out;                                                                                                            |
    | 14   |             |                                                                                                                                                  |
    | 15   |             |   function void build_phase (uvm_phase phase);                                                                                                   |
    | 16   |      1      |     super.build_phase(phase);                                                                                                                    |
    | 17   |             |                                                                                                                                                  |
    | 18   |      1      |     fifo_out = new("fifo_out",this);                                                                                                             |
    | 19   |             |                                                                                                                                                  |
    | 20   |      1      |     result_get_port = new("result_get_port",this);                                                                                               |
    | 21   |             |   endfunction : build_phase                                                                                                                      |
    | 22   |             |                                                                                                                                                  |
    | 23   |             |   function void connect_phase(uvm_phase phase);                                                                                                  |
    | 24   |      1      |     super.connect_phase(phase);                                                                                                                  |
    | 25   |      1      |     result_get_port.connect(fifo_out.get_export);                                                                                                |
    | 26   |             |   endfunction : connect_phase                                                                                                                    |
    | 27   |             |                                                                                                                                                  |
    | 28   |             |   function void check_phase(uvm_phase phase);                                                                                                    |
    | 29   |      1      |     super.check_phase(phase);                                                                                                                    |
    | 30   |             |                                                                                                                                                  |
    | 31   |    1,55     |     while(result_get_port.can_get()) begin                                                                                                       |
    | 32   |     55      |       out = sequence_item #(pkg::G_LENGTH)::type_id::create("out",this);                                                                         |
    | 33   |             |                                                                                                                                                  |
    | 34   |     55      |       result_get_port.try_get(out);                                                                                                              |
    | 35   |             |                                                                                                                                                  |
    | 36   |             |                                                                                                                                                  |
    | 37   |  55,55,55   |       `uvm_info(get_type_name(),$sformatf("o_number=0x%0h, o_is_fizz=0x%0h, o_is_buzz= 0x%0h",out.o_number,out.o_is_fizz,out.o_is_buzz),UVM_LOW) |
    | 38   |     55      |       if(out.o_number !=0 && out.o_number %3 ==0 && out.o_is_fizz !=1)                                                                           |
    | 39   |    0,0,0    |         `uvm_error(get_type_name(),$sformatf("FAIL o_number=0x%0h, o_is_fizz=0x%0h",out.o_number,out.o_is_fizz))                                 |
    | 40   |             |                                                                                                                                                  |
    | 41   |             |                                                                                                                                                  |
    | 42   |     55      |       if(out.o_number !=0 &&  out.o_number %5 ==0 && out.o_is_buzz !=1)                                                                          |
    | 43   |    0,0,0    |         `uvm_error(get_type_name(),$sformatf("FAIL o_number=0x%0h, o_is_buzz=0x%0h",out.o_number,out.o_is_buzz))                                 |
    | 44   |             |                                                                                                                                                  |
    | 45   |             |     end                                                                                                                                          |
    =========================================================================================================================================================================


    BRANCH COVERAGE
    ===============================
    |    Source: scoreboard.sv    |
    ===============================
    | Branch/Line          | Hits |
    ===============================
    | IF branch#37#1#      |  1/2 |
    |     if_branch        |   55 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#38#1#      |  1/2 |
    |     if_branch        |    0 |
    |     all_false_branch |   55 |
    |----------------------|------|
    | IF branch#39#1#      |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#42#1#      |  1/2 |
    |     if_branch        |    0 |
    |     all_false_branch |   55 |
    |----------------------|------|
    | IF branch#43#1#      |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    ===============================


CLASS - /\package testbench_pkg\/env : work.testbench_pkg/\testbench_pkg env \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    75.000% |
    |--------------------|--------|------------|
    | Statements         |        |     9 / 12 |
    | Subprograms        |        |      3 / 6 |
    ============================================
    WEIGHTED AVERAGE LOCAL: 75.000%


    STATEMENT COVERAGE
    ==================================================================================================================
    | Line |    Hits     |                                      Source: env.sv                                       |
    |------|-------------|-------------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                            |
    | 2    |             | class env extends uvm_env;                                                                |
    | 3    | UNR,UNR,UNR |   `uvm_component_utils(env)                                                               |
    | 4    |             |                                                                                           |
    | 5    |             |   uvm_sequencer #(sequence_item #(pkg::G_LENGTH)) seqr;                                   |
    | 6    |             |   driver drv;                                                                             |
    | 7    |             |   monitor_out res_mon;                                                                    |
    | 8    |             |   scoreboard scb;                                                                         |
    | 9    |             |                                                                                           |
    | 10   |             |   function new (string name = "", uvm_component parent);                                  |
    | 11   |      1      |     super.new(name,parent);                                                               |
    | 12   |             |   endfunction : new                                                                       |
    | 13   |             |                                                                                           |
    | 14   |             |   function void build_phase(uvm_phase phase);                                             |
    | 15   |      1      |     super.build_phase(phase);                                                             |
    | 16   |      1      |     seqr = uvm_sequencer #(sequence_item #(pkg::G_LENGTH))::type_id::create("seqr",this); |
    | 17   |             |                                                                                           |
    | 18   |      1      |     drv = driver::type_id::create("drv",this);                                            |
    | 19   |      1      |     res_mon = monitor_out::type_id::create("res_mon",this);                               |
    | 20   |      1      |     scb = scoreboard::type_id::create("scb",this);                                        |
    | 21   |             |   endfunction : build_phase                                                               |
    | 22   |             |                                                                                           |
    | 23   |             |   function void connect_phase(uvm_phase phase);                                           |
    | 24   |      1      |     super.connect_phase(phase);                                                           |
    | 25   |      1      |     drv.seq_item_port.connect(seqr.seq_item_export);                                      |
    | 26   |      1      |     res_mon.mon_out.connect(scb.fifo_out.analysis_export);                                |
    | 27   |             |   endfunction : connect_phase                                                             |
    | 28   |             |                                                                                           |
    ==================================================================================================================


CLASS - /\package testbench_pkg\/test : work.testbench_pkg/\testbench_pkg test \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    81.818% |
    |--------------------|--------|------------|
    | Statements         |        |     9 / 11 |
    | Subprograms        |        |      4 / 6 |
    ============================================
    WEIGHTED AVERAGE LOCAL: 81.818%


    STATEMENT COVERAGE
    ==================================================================================
    | Line |   Hits    |                       Source: test.sv                       |
    |------|-----------|-------------------------------------------------------------|
    | 1    |           | class test extends uvm_test;                                |
    | 2    | UNR,UNR,1 |   `uvm_component_utils(test)                                |
    | 3    |           |                                                             |
    | 4    |           |   env environment;                                          |
    | 5    |           |   rand_sequence seq;                                        |
    | 6    |           |                                                             |
    | 7    |           |                                                             |
    | 8    |           |   function new (string name = "", uvm_component parent);    |
    | 9    |     1     |     super.new(name,parent);                                 |
    | 10   |           |   endfunction : new                                         |
    | 11   |           |                                                             |
    | 12   |           |                                                             |
    | 13   |           |   function void build_phase(uvm_phase phase);               |
    | 14   |     1     |     super.build_phase(phase);                               |
    | 15   |     1     |     environment = env::type_id::create("environment",this); |
    | 16   |           |   endfunction : build_phase                                 |
    | 17   |           |                                                             |
    | 18   |           |   task run_phase(uvm_phase phase);                          |
    | 19   |     1     |     seq = rand_sequence::type_id::create("seq",this);       |
    | 20   |     1     |     phase.raise_objection(this);                            |
    | 21   |     1     |     seq.start(environment.seqr);                            |
    | 22   |           |                                                             |
    | 23   |     1     |     phase.phase_done.set_drain_time(this, 50ns);            |
    | 24   |     1     |     phase.drop_objection(this);                             |
    | 25   |           |                                                             |
    | 26   |           |   endtask : run_phase                                       |
    ==================================================================================


CLASS - /\package testbench_pkg\/@sequence_item#(H32)@ : work.testbench_pkg/\testbench_pkg sequence_item \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    12.500% |
    |--------------------|--------|------------|
    | Statements         |        |     2 / 16 |
    | Subprograms        |        |      2 / 6 |
    ============================================
    | Branch Coverage    |      1 |     0.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |     0 / 10 |
    | Branches           |        |      0 / 5 |
    ============================================
    WEIGHTED AVERAGE LOCAL: 6.250%


    STATEMENT COVERAGE
    ====================================================================================================================================================
    | Line |                            Hits                            |                           Source: sequence_item.sv                           |
    |------|------------------------------------------------------------|------------------------------------------------------------------------------|
    | 1    |                                                            | class sequence_item #(parameter int G_LENGTH = 4) extends uvm_sequence_item; |
    | 2    | UNR,UNR,UNR,UNR,UNR,UNR,50,UNR,UNR,UNR,UNR,UNR,UNR,UNR,UNR |   `uvm_object_utils(sequence_item #(G_LENGTH))                               |
    | 3    |                                                            |                                                                              |
    | 4    |                                                            |   rand logic i_en;                                                           |
    | 5    |                                                            |   logic o_is_fizz;                                                           |
    | 6    |                                                            |   logic o_is_buzz;                                                           |
    | 7    |                                                            |   logic [$clog2(G_LENGTH) -1 : 0] o_number;                                  |
    | 8    |                                                            |                                                                              |
    | 9    |                                                            |   function new(string name = "");                                            |
    | 10   |                            161                             |     super.new(name);                                                         |
    | 11   |                                                            |   endfunction : new                                                          |
    | 12   |                                                            |                                                                              |
    ====================================================================================================================================================


    BRANCH COVERAGE
    ===============================
    |  Source: sequence_item.sv   |
    ===============================
    | Branch/Line          | Hits |
    ===============================
    | IF branch#2#1#       |  0/2 |
    |     if_branch        |    0 |
    |     else_branch      |    0 |
    |----------------------|------|
    | IF branch#2#2#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#2#3#       |  0/2 |
    |     if_branch        |    0 |
    |     else_branch      |    0 |
    |----------------------|------|
    | IF branch#2#4#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#2#5#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    ===============================


+++++++++++++++++++++++++++++++++++++++++++++
++++++++++       DESIGN UNITS      ++++++++++
+++++++++++++++++++++++++++++++++++++++++++++


CUMULATIVE SUMMARY
============================================
|   Coverage Type    | Weight | Hits/Total |
============================================
| Statement Coverage |      1 |    73.099% |
|--------------------|--------|------------|
| Statements         |        |  125 / 171 |
| Subprograms        |        |    24 / 45 |
============================================
| Branch Coverage    |      1 |    51.666% |
|--------------------|--------|------------|
| Branch paths       |        |    31 / 60 |
| Branches           |        |     9 / 26 |
============================================
| Assertion Coverage |      1 |   100.000% |
|--------------------|--------|------------|
| Assertions         |        |      4 / 4 |
| Covers             |        |      2 / 2 |
============================================
CUMULATIVE DESIGN-BASED COVERAGE: 74.922%
COVERED DESIGN UNITS: 2 / 9
FILES: 9


MODULE - work.tb_top


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |   100.000% |
    |--------------------|--------|------------|
    | Statements         |        |      7 / 7 |
    | Subprograms        |        |      0 / 0 |
    ============================================
    WEIGHTED AVERAGE: 100.000%


    STATEMENT COVERAGE
    ==============================================================================================================================================
    | Line | Hits |                                                     Source: testbench.sv                                                     |
    |------|------|------------------------------------------------------------------------------------------------------------------------------|
    | 20   |      |     //Registers the Interface in the configuration block                                                                     |
    | 21   |      |     //so that other blocks can use it                                                                                        |
    | 22   |  1   |     uvm_resource_db#(virtual fizzbuzz_intf)::set(.scope("ifs"), .name("fizzbuzz_intf"),                         .val(intf)); |
    | 23   |      |                                                                                                                              |
    | 24   |  1   |     uvm_resource_db #(int)::set("*", "g_length", G_LENGTH);                                                                  |
    | 25   |      |                                                                                                                              |
    | 26   |      |                                                                                                                              |
    | 27   |      |     //Executes the test                                                                                                      |
    | 28   |  1   |     run_test("test");                                                                                                        |
    | 29   |      |   end                                                                                                                        |
    | 30   |      |                                                                                                                              |
    | 31   |      |   //Variable initialization                                                                                                  |
    | 32   |      |   initial begin                                                                                                              |
    | 33   |  1   |     intf.i_clk = 1'b1;                                                                                                       |
    | 34   |      |     // Dump waves                                                                                                            |
    | 35   |  1   |     $dumpfile("dump.vcd");                                                                                                   |
    | 36   |  1   |     $dumpvars(0, tb_top);                                                                                                    |
    | 37   |      |   end                                                                                                                        |
    | 38   |      |                                                                                                                              |
    | 39   |      |   //Clock generation                                                                                                         |
    | 40   |      |   always                                                                                                                     |
    | 41   | 114  |     #5 intf.i_clk = ~intf.i_clk;                                                                                             |
    | 42   |      | endmodule : tb_top                                                                                                           |
    ==============================================================================================================================================


MODULE - work.fizzbuzz


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |   100.000% |
    |--------------------|--------|------------|
    | Statements         |        |    39 / 39 |
    | Subprograms        |        |      0 / 0 |
    ============================================
    | Branch Coverage    |      1 |   100.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |    22 / 22 |
    | Branches           |        |      7 / 7 |
    ============================================
    | Assertion Coverage |      1 |   100.000% |
    |--------------------|--------|------------|
    | Assertions         |        |      3 / 3 |
    | Covers             |        |      2 / 2 |
    ============================================
    WEIGHTED AVERAGE: 100.000%


    STATEMENT COVERAGE
    ============================================================================================================================================
    | Line | Hits |                                                     Source: design.sv                                                      |
    |------|------|----------------------------------------------------------------------------------------------------------------------------|
    | 26   |      |         logic start;                                                                                                       |
    | 27   |      |                                                                                                                            |
    | 28   |  58  |         if(i_rst) begin                                                                                                    |
    | 29   |  1   |             cnt <= 0;                                                                                                      |
    | 30   |  1   |             state_fizz <= idle_fizz;                                                                                       |
    | 31   |  1   |             state_buzz <= idle_buzz;                                                                                       |
    | 32   |  1   |             start = 1'b0;                                                                                                  |
    | 33   |      |                                                                                                                            |
    | 34   |  1   |             o_is_fizz <= 1'b0;                                                                                             |
    | 35   |  1   |             o_is_buzz <= 1'b0;                                                                                             |
    | 36   |      |         end else begin                                                                                                     |
    | 37   |      |                                                                                                                            |
    | 38   |  57  |             o_is_fizz <= 1'b0;                                                                                             |
    | 39   |  57  |             case (state_fizz)                                                                                              |
    | 40   |      |                 idle_fizz : begin                                                                                          |
    | 41   |  3   |                     if(i_en) begin                                                                                         |
    | 42   |  2   |                         start = 1'b1;                                                                                      |
    | 43   |  2   |                         state_fizz <= fizz_1;                                                                              |
    | 44   |      |                     end else                                                                                               |
    | 45   |  1   |                         start = 1'b0;                                                                                      |
    | 46   |      |                 end                                                                                                        |
    | 47   |      |                                                                                                                            |
    | 48   |      |                 fizz_1 :                                                                                                   |
    | 49   |  18  |                     state_fizz <= fizz_2;                                                                                  |
    | 50   |      |                 fizz_2 : begin                                                                                             |
    | 51   |  18  |                     o_is_fizz <= 1'b1;                                                                                     |
    | 52   |  18  |                     state_fizz <= fizz_3;                                                                                  |
    | 53   |      |                 end                                                                                                        |
    | 54   |      |                 fizz_3 :                                                                                                   |
    | 55   |  17  |                     state_fizz <= fizz_1;                                                                                  |
    | 56   |      |                 default :                                                                                                  |
    | 57   |  1   |                     state_fizz <= idle_fizz;                                                                               |
    | 58   |      |             endcase                                                                                                        |
    | 59   |      |                                                                                                                            |
    | 60   |  57  |             o_is_buzz <= 1'b0;                                                                                             |
    | 61   |  57  |             case (state_buzz)                                                                                              |
    | 62   |      |                 idle_buzz : begin                                                                                          |
    | 63   |  3   |                     if(i_en) begin                                                                                         |
    | 64   |  2   |                         start = 1'b1;                                                                                      |
    | 65   |  2   |                         state_buzz <= buzz_1;                                                                              |
    | 66   |      |                     end else                                                                                               |
    | 67   |  1   |                         start = 1'b0;                                                                                      |
    | 68   |      |                 end                                                                                                        |
    | 69   |      |                 buzz_1 :                                                                                                   |
    | 70   |  11  |                     state_buzz <= buzz_2;                                                                                  |
    | 71   |      |                 buzz_2 :                                                                                                   |
    | 72   |  11  |                     state_buzz <= buzz_3;                                                                                  |
    | 73   |      |                 buzz_3 :                                                                                                   |
    | 74   |  11  |                     state_buzz <= buzz_4;                                                                                  |
    | 75   |      |                 buzz_4 : begin                                                                                             |
    | 76   |  10  |                     o_is_buzz <= 1'b1;                                                                                     |
    | 77   |  10  |                     state_buzz <= buzz_5;                                                                                  |
    | 78   |      |                 end                                                                                                        |
    | 79   |      |                 buzz_5 :                                                                                                   |
    | 80   |  10  |                     state_buzz <= buzz_1;                                                                                  |
    | 81   |      |                 default :                                                                                                  |
    | 82   |  1   |                     state_buzz <= idle_buzz;                                                                               |
    | 83   |      |             endcase                                                                                                        |
    | 84   |      |                                                                                                                            |
    | 85   |  57  |             if(start) begin                                                                                                |
    | 86   |  55  |                 if(32'(cnt) < G_LENGTH)                                                                                    |
    | 87   |  54  |                     cnt <= cnt + 1;                                                                                        |
    | 88   |      |                 else begin                                                                                                 |
    | 89   |  1   |                     cnt <= '0;                                                                                             |
    | 90   |  1   |                     state_fizz <= idle_fizz;                                                                               |
    | 91   |  1   |                     state_buzz <= idle_buzz;                                                                               |
    | 92   |      |                 end                                                                                                        |
    | 93   |      |             end else                                                                                                       |
    | 94   |  2   |                 cnt <= '0;                                                                                                 |
    | 95   |      |         end                                                                                                                |
    | 96   |      |     end                                                                                                                    |
    | 97   |      |                                                                                                                            |
    | 98   |  57  |     assign o_number = cnt;                                                                                                 |
    | 99   |      |                                                                                                                            |
    | 100  |      |     check_fizz : assert property (@(posedge i_clk) disable iff(i_rst) (o_number > 0) && (o_number %3 == 0) |-> o_is_fizz); |
    ============================================================================================================================================


    BRANCH COVERAGE
    ============================
    |    Source: design.sv     |
    ============================
    | Branch/Line       | Hits |
    ============================
    | IF branch#28#1#   |  2/2 |
    |     if_branch     |    1 |
    |     else_branch   |   57 |
    |-------------------|------|
    | CASE branch#39#1# |  5/5 |
    |     true#40#1#    |    3 |
    |     true#48#1#    |   18 |
    |     true#50#1#    |   18 |
    |     true#54#1#    |   17 |
    |     true#56#1#    |    1 |
    |-------------------|------|
    | IF branch#41#1#   |  2/2 |
    |     if_branch     |    2 |
    |     else_branch   |    1 |
    |-------------------|------|
    | CASE branch#61#1# |  7/7 |
    |     true#62#1#    |    3 |
    |     true#69#1#    |   11 |
    |     true#71#1#    |   11 |
    |     true#73#1#    |   11 |
    |     true#75#1#    |   10 |
    |     true#79#1#    |   10 |
    |     true#81#1#    |    1 |
    |-------------------|------|
    | IF branch#63#1#   |  2/2 |
    |     if_branch     |    2 |
    |     else_branch   |    1 |
    |-------------------|------|
    | IF branch#85#1#   |  2/2 |
    |     if_branch     |   55 |
    |     else_branch   |    2 |
    |-------------------|------|
    | IF branch#86#1#   |  2/2 |
    |     if_branch     |   54 |
    |     else_branch   |    1 |
    ============================


    ASSERTION COVERAGE
    =========================================================
    |        Name        |     Source     | Failed | Passed |
    |--------------------|----------------|--------|--------|
    | check_fizz         | design.sv(100) |      0 |     16 |
    | check_buzz         | design.sv(101) |      0 |     10 |
    | check_number_range | design.sv(102) |      0 |      2 |
    =========================================================


    COVER COVERAGE
    =======================================
    |    Name     |     Source     | Hits |
    |-------------|----------------|------|
    | cover_en    | design.sv(104) |    1 |
    | cover_range | design.sv(105) |    1 |
    =======================================


CLASS - work.testbench_pkg/\testbench_pkg rand_sequence \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    33.333% |
    |--------------------|--------|------------|
    | Statements         |        |     7 / 21 |
    | Subprograms        |        |      3 / 7 |
    ============================================
    | Branch Coverage    |      1 |     0.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |     0 / 10 |
    | Branches           |        |      0 / 5 |
    ============================================
    | Assertion Coverage |      1 |   100.000% |
    |--------------------|--------|------------|
    | Assertions         |        |      1 / 1 |
    ============================================
    WEIGHTED AVERAGE: 44.444%


    STATEMENT COVERAGE
    ===========================================================================================================================================================================
    | Line |                           Hits                            |                                         Source: sequence.sv                                          |
    |------|-----------------------------------------------------------|------------------------------------------------------------------------------------------------------|
    | 1    |                                                           | import pkg::*;                                                                                       |
    | 2    |                                                           | class rand_sequence extends uvm_sequence;                                                            |
    | 3    | UNR,UNR,UNR,UNR,UNR,UNR,1,UNR,UNR,UNR,UNR,UNR,UNR,UNR,UNR |   `uvm_object_utils(rand_sequence)                                                                   |
    | 4    |                                                           |                                                                                                      |
    | 5    |                                                           |   sequence_item #(pkg::G_LENGTH) sa_tx;                                                              |
    | 6    |                                                           | //   covergroup cg;                                                                                  |
    | 7    |                                                           |                                                                                                      |
    | 8    |                                                           | //     A:   coverpoint sa_tx.i_A;                                                                    |
    | 9    |                                                           | //     B:   coverpoint sa_tx.i_B;                                                                    |
    | 10   |                                                           | //   endgroup: cg                                                                                    |
    | 11   |                                                           |                                                                                                      |
    | 12   |                                                           |   function new(string name = "");                                                                    |
    | 13   |                             1                             |     super.new(name);                                                                                 |
    | 14   |                                                           | //     cg = new();                                                                                   |
    | 15   |                                                           |   endfunction                                                                                        |
    | 16   |                                                           |                                                                                                      |
    | 17   |                                                           |   task body();                                                                                       |
    | 18   |                                                           |                                                                                                      |
    | 19   |                             1                             |     repeat(pkg::G_LENGTH) begin                                                                      |
    | 20   |                                                           | //     while(cg.get_coverage != 100.0) begin                                                         |
    | 21   |                            50                             |       sa_tx = sequence_item #(pkg::G_LENGTH)::type_id::create("sa_tx");                              |
    | 22   |                            50                             |       start_item(sa_tx);                                                                             |
    | 23   |                            50                             |       assert(sa_tx.randomize());                                                                     |
    | 24   |                                                           | //       cg.sample();                                                                                |
    | 25   |                            50                             |       finish_item(sa_tx);                                                                            |
    | 26   |                                                           | //       `uvm_info(get_type_name(), $sformatf("Current Coverage = %0f", cg.get_coverage()), UVM_LOW) |
    | 27   |                                                           |     end                                                                                              |
    ===========================================================================================================================================================================


    BRANCH COVERAGE
    ===============================
    |     Source: sequence.sv     |
    ===============================
    | Branch/Line          | Hits |
    ===============================
    | IF branch#3#1#       |  0/2 |
    |     if_branch        |    0 |
    |     else_branch      |    0 |
    |----------------------|------|
    | IF branch#3#2#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#3#3#       |  0/2 |
    |     if_branch        |    0 |
    |     else_branch      |    0 |
    |----------------------|------|
    | IF branch#3#4#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#3#5#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    ===============================


    ASSERTION COVERAGE
    =======================================================
    |      Name       |     Source      | Failed | Passed |
    |-----------------|-----------------|--------|--------|
    | @IMM_ASSERT#23@ | sequence.sv(23) |      0 |     50 |
    =======================================================


CLASS - work.testbench_pkg/\testbench_pkg driver \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    83.333% |
    |--------------------|--------|------------|
    | Statements         |        |    15 / 18 |
    | Subprograms        |        |      4 / 7 |
    ============================================
    | Branch Coverage    |      1 |   100.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |      2 / 2 |
    | Branches           |        |      1 / 1 |
    ============================================
    WEIGHTED AVERAGE: 91.666%


    STATEMENT COVERAGE
    =============================================================================================================================================
    | Line |    Hits     |                                                  Source: driver.sv                                                   |
    |------|-------------|----------------------------------------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                                                       |
    | 2    |             | class driver extends uvm_driver #(sequence_item #(pkg::G_LENGTH));                                                   |
    | 3    | UNR,UNR,UNR |   `uvm_component_utils(driver)                                                                                       |
    | 4    |             |                                                                                                                      |
    | 5    |             |   virtual fizzbuzz_intf intf;                                                                                        |
    | 6    |             |                                                                                                                      |
    | 7    |             |   function new (string name = "", uvm_component parent);                                                             |
    | 8    |      1      |     super.new(name,parent);                                                                                          |
    | 9    |             |   endfunction                                                                                                        |
    | 10   |             |                                                                                                                      |
    | 11   |             |   function void build_phase(uvm_phase phase);                                                                        |
    | 12   |      1      |     super.build_phase(phase);                                                                                        |
    | 13   |      1      |     void'(uvm_resource_db#(virtual fizzbuzz_intf)::read_by_name(.scope("ifs"), .name("fizzbuzz_intf"), .val(intf))); |
    | 14   |             |   endfunction                                                                                                        |
    | 15   |             |                                                                                                                      |
    | 16   |             |   virtual task reset_phase(uvm_phase phase);                                                                         |
    | 17   |      1      |     phase.raise_objection(this);                                                                                     |
    | 18   |      1      |     intf.i_rst = 1'b1;                                                                                               |
    | 19   |             |                                                                                                                      |
    | 20   |      1      |     repeat(5)                                                                                                        |
    | 21   |             |       @(posedge intf.i_clk)                                                                                          |
    | 22   |      5      |     intf.i_rst = 1'b0;                                                                                               |
    | 23   |      1      |     phase.drop_objection(this);                                                                                      |
    | 24   |             |   endtask: reset_phase                                                                                               |
    | 25   |             |                                                                                                                      |
    | 26   |             |                                                                                                                      |
    | 27   |             |   virtual task run_phase(uvm_phase phase);                                                                           |
    | 28   |             |     sequence_item #(pkg::G_LENGTH) req_item;                                                                         |
    | 29   |             |                                                                                                                      |
    | 30   |      1      |     forever begin                                                                                                    |
    | 31   |     53      |       if(!intf.i_rst) begin                                                                                          |
    | 32   |     51      |           seq_item_port.get_next_item(req_item);                                                                     |
    | 33   |     50      |           intf.i_en <= 1'b1;                                                                                         |
    | 34   |     50      |           @(posedge intf.i_clk);                                                                                     |
    | 35   |     50      |           seq_item_port.item_done();                                                                                 |
    | 36   |             |       end else                                                                                                       |
    | 37   |      2      |         @(posedge intf.i_clk);                                                                                       |
    | 38   |             |     end                                                                                                              |
    | 39   |             |   endtask                                                                                                            |
    =============================================================================================================================================


    BRANCH COVERAGE
    ==========================
    |   Source: driver.sv    |
    ==========================
    | Branch/Line     | Hits |
    ==========================
    | IF branch#31#1# |  2/2 |
    |     if_branch   |   51 |
    |     else_branch |    2 |
    ==========================


CLASS - work.testbench_pkg/\testbench_pkg monitor_out \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    90.909% |
    |--------------------|--------|------------|
    | Statements         |        |    20 / 22 |
    | Subprograms        |        |      4 / 6 |
    ============================================
    | Branch Coverage    |      1 |    66.666% |
    |--------------------|--------|------------|
    | Branch paths       |        |      4 / 6 |
    | Branches           |        |      1 / 3 |
    ============================================
    WEIGHTED AVERAGE: 78.787%


    STATEMENT COVERAGE
    ===================================================================================================================================================================================================
    | Line |    Hits     |                                                                           Source: monitor_out.sv                                                                           |
    |------|-------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                                                                                                             |
    | 2    |             | class monitor_out extends uvm_monitor;                                                                                                                                     |
    | 3    | UNR,UNR,222 |   `uvm_component_utils(monitor_out)                                                                                                                                        |
    | 4    |             |                                                                                                                                                                            |
    | 5    |             |   uvm_analysis_port #(sequence_item #(pkg::G_LENGTH)) mon_out;                                                                                                             |
    | 6    |             |   virtual fizzbuzz_intf intf;                                                                                                                                              |
    | 7    |             |   sequence_item #(pkg::G_LENGTH) datum;                                                                                                                                    |
    | 8    |             |                                                                                                                                                                            |
    | 9    |             |   function new (string name = "", uvm_component parent);                                                                                                                   |
    | 10   |      1      |     super.new(name,parent);                                                                                                                                                |
    | 11   |             |                                                                                                                                                                            |
    | 12   |             |   endfunction : new                                                                                                                                                        |
    | 13   |             |                                                                                                                                                                            |
    | 14   |             |                                                                                                                                                                            |
    | 15   |             |   function void build_phase(uvm_phase phase);                                                                                                                              |
    | 16   |      1      |     super.build_phase(phase);                                                                                                                                              |
    | 17   |      1      |     void'(uvm_resource_db#(virtual fizzbuzz_intf)::read_by_name(.scope("ifs"), .name("fizzbuzz_intf"), .val(intf)));                                                       |
    | 18   |             |                                                                                                                                                                            |
    | 19   |      1      |     mon_out = new ("mon_out",this);                                                                                                                                        |
    | 20   |             |   endfunction: build_phase                                                                                                                                                 |
    | 21   |             |                                                                                                                                                                            |
    | 22   |             |   virtual task run_phase(uvm_phase phase);                                                                                                                                 |
    | 23   |             |                                                                                                                                                                            |
    | 24   |      1      |     forever begin                                                                                                                                                          |
    | 25   |     58      |       if(!intf.i_rst) begin                                                                                                                                                |
    | 26   |     56      |         datum = sequence_item #(G_LENGTH)::type_id::create("datum",this);                                                                                                  |
    | 27   |     56      |         datum.o_is_fizz <= intf.o_is_fizz;                                                                                                                                 |
    | 28   |     56      |         datum.o_is_buzz <= intf.o_is_buzz;                                                                                                                                 |
    | 29   |     56      |         datum.o_number <= intf.o_number;                                                                                                                                   |
    | 30   |             |                                                                                                                                                                            |
    | 31   |  56,56,56   |         `uvm_info(get_type_name(),$sformatf("intf OUT  o_is_fizz = 0x%0h, o_is_buzz = 0x%0h,     o_number=0x%0h",intf.o_is_fizz,intf.o_is_buzz,intf.o_number),UVM_LOW)     |
    | 32   |     56      |         @(posedge intf.i_clk);                                                                                                                                             |
    | 33   |  55,55,55   |         `uvm_info(get_type_name(),$sformatf("datum OUT  o_is_fizz = 0x%0h, o_is_buzz = 0x%0h,     o_number=0x%0h",datum.o_is_fizz,datum.o_is_buzz,datum.o_number),UVM_LOW) |
    | 34   |     55      |       mon_out.write(datum);                                                                                                                                                |
    | 35   |             |       end else                                                                                                                                                             |
    | 36   |      2      |         @(posedge intf.i_clk);                                                                                                                                             |
    | 37   |             |     end                                                                                                                                                                    |
    | 38   |             |   endtask : run_phase                                                                                                                                                      |
    ===================================================================================================================================================================================================


    BRANCH COVERAGE
    ===============================
    |   Source: monitor_out.sv    |
    ===============================
    | Branch/Line          | Hits |
    ===============================
    | IF branch#25#1#      |  2/2 |
    |     if_branch        |   56 |
    |     else_branch      |    2 |
    |----------------------|------|
    | IF branch#31#1#      |  1/2 |
    |     if_branch        |   56 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#33#1#      |  1/2 |
    |     if_branch        |   55 |
    |     all_false_branch |    0 |
    ===============================


CLASS - work.testbench_pkg/\testbench_pkg scoreboard \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    68.000% |
    |--------------------|--------|------------|
    | Statements         |        |    17 / 25 |
    | Subprograms        |        |      4 / 7 |
    ============================================
    | Branch Coverage    |      1 |    30.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |     3 / 10 |
    | Branches           |        |      0 / 5 |
    ============================================
    WEIGHTED AVERAGE: 49.000%


    STATEMENT COVERAGE
    =========================================================================================================================================================================
    | Line |    Hits     |                                                              Source: scoreboard.sv                                                               |
    |------|-------------|--------------------------------------------------------------------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                                                                                   |
    | 2    |             | class scoreboard extends uvm_scoreboard;                                                                                                         |
    | 3    | UNR,UNR,110 |   `uvm_component_utils(scoreboard)                                                                                                               |
    | 4    |             |                                                                                                                                                  |
    | 5    |             |   function new(string name = "", uvm_component parent);                                                                                          |
    | 6    |      1      |     super.new(name,parent);                                                                                                                      |
    | 7    |             |   endfunction : new                                                                                                                              |
    | 8    |             |                                                                                                                                                  |
    | 9    |             |   uvm_tlm_analysis_fifo #(sequence_item #(pkg::G_LENGTH)) fifo_out;                                                                              |
    | 10   |             |                                                                                                                                                  |
    | 11   |             |   uvm_get_port #(sequence_item #(pkg::G_LENGTH)) result_get_port;                                                                                |
    | 12   |             |                                                                                                                                                  |
    | 13   |             |   sequence_item #(pkg::G_LENGTH) out;                                                                                                            |
    | 14   |             |                                                                                                                                                  |
    | 15   |             |   function void build_phase (uvm_phase phase);                                                                                                   |
    | 16   |      1      |     super.build_phase(phase);                                                                                                                    |
    | 17   |             |                                                                                                                                                  |
    | 18   |      1      |     fifo_out = new("fifo_out",this);                                                                                                             |
    | 19   |             |                                                                                                                                                  |
    | 20   |      1      |     result_get_port = new("result_get_port",this);                                                                                               |
    | 21   |             |   endfunction : build_phase                                                                                                                      |
    | 22   |             |                                                                                                                                                  |
    | 23   |             |   function void connect_phase(uvm_phase phase);                                                                                                  |
    | 24   |      1      |     super.connect_phase(phase);                                                                                                                  |
    | 25   |      1      |     result_get_port.connect(fifo_out.get_export);                                                                                                |
    | 26   |             |   endfunction : connect_phase                                                                                                                    |
    | 27   |             |                                                                                                                                                  |
    | 28   |             |   function void check_phase(uvm_phase phase);                                                                                                    |
    | 29   |      1      |     super.check_phase(phase);                                                                                                                    |
    | 30   |             |                                                                                                                                                  |
    | 31   |    1,55     |     while(result_get_port.can_get()) begin                                                                                                       |
    | 32   |     55      |       out = sequence_item #(pkg::G_LENGTH)::type_id::create("out",this);                                                                         |
    | 33   |             |                                                                                                                                                  |
    | 34   |     55      |       result_get_port.try_get(out);                                                                                                              |
    | 35   |             |                                                                                                                                                  |
    | 36   |             |                                                                                                                                                  |
    | 37   |  55,55,55   |       `uvm_info(get_type_name(),$sformatf("o_number=0x%0h, o_is_fizz=0x%0h, o_is_buzz= 0x%0h",out.o_number,out.o_is_fizz,out.o_is_buzz),UVM_LOW) |
    | 38   |     55      |       if(out.o_number !=0 && out.o_number %3 ==0 && out.o_is_fizz !=1)                                                                           |
    | 39   |    0,0,0    |         `uvm_error(get_type_name(),$sformatf("FAIL o_number=0x%0h, o_is_fizz=0x%0h",out.o_number,out.o_is_fizz))                                 |
    | 40   |             |                                                                                                                                                  |
    | 41   |             |                                                                                                                                                  |
    | 42   |     55      |       if(out.o_number !=0 &&  out.o_number %5 ==0 && out.o_is_buzz !=1)                                                                          |
    | 43   |    0,0,0    |         `uvm_error(get_type_name(),$sformatf("FAIL o_number=0x%0h, o_is_buzz=0x%0h",out.o_number,out.o_is_buzz))                                 |
    | 44   |             |                                                                                                                                                  |
    | 45   |             |     end                                                                                                                                          |
    =========================================================================================================================================================================


    BRANCH COVERAGE
    ===============================
    |    Source: scoreboard.sv    |
    ===============================
    | Branch/Line          | Hits |
    ===============================
    | IF branch#37#1#      |  1/2 |
    |     if_branch        |   55 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#38#1#      |  1/2 |
    |     if_branch        |    0 |
    |     all_false_branch |   55 |
    |----------------------|------|
    | IF branch#39#1#      |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#42#1#      |  1/2 |
    |     if_branch        |    0 |
    |     all_false_branch |   55 |
    |----------------------|------|
    | IF branch#43#1#      |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    ===============================


CLASS - work.testbench_pkg/\testbench_pkg env \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    75.000% |
    |--------------------|--------|------------|
    | Statements         |        |     9 / 12 |
    | Subprograms        |        |      3 / 6 |
    ============================================
    WEIGHTED AVERAGE: 75.000%


    STATEMENT COVERAGE
    ==================================================================================================================
    | Line |    Hits     |                                      Source: env.sv                                       |
    |------|-------------|-------------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                            |
    | 2    |             | class env extends uvm_env;                                                                |
    | 3    | UNR,UNR,UNR |   `uvm_component_utils(env)                                                               |
    | 4    |             |                                                                                           |
    | 5    |             |   uvm_sequencer #(sequence_item #(pkg::G_LENGTH)) seqr;                                   |
    | 6    |             |   driver drv;                                                                             |
    | 7    |             |   monitor_out res_mon;                                                                    |
    | 8    |             |   scoreboard scb;                                                                         |
    | 9    |             |                                                                                           |
    | 10   |             |   function new (string name = "", uvm_component parent);                                  |
    | 11   |      1      |     super.new(name,parent);                                                               |
    | 12   |             |   endfunction : new                                                                       |
    | 13   |             |                                                                                           |
    | 14   |             |   function void build_phase(uvm_phase phase);                                             |
    | 15   |      1      |     super.build_phase(phase);                                                             |
    | 16   |      1      |     seqr = uvm_sequencer #(sequence_item #(pkg::G_LENGTH))::type_id::create("seqr",this); |
    | 17   |             |                                                                                           |
    | 18   |      1      |     drv = driver::type_id::create("drv",this);                                            |
    | 19   |      1      |     res_mon = monitor_out::type_id::create("res_mon",this);                               |
    | 20   |      1      |     scb = scoreboard::type_id::create("scb",this);                                        |
    | 21   |             |   endfunction : build_phase                                                               |
    | 22   |             |                                                                                           |
    | 23   |             |   function void connect_phase(uvm_phase phase);                                           |
    | 24   |      1      |     super.connect_phase(phase);                                                           |
    | 25   |      1      |     drv.seq_item_port.connect(seqr.seq_item_export);                                      |
    | 26   |      1      |     res_mon.mon_out.connect(scb.fifo_out.analysis_export);                                |
    | 27   |             |   endfunction : connect_phase                                                             |
    | 28   |             |                                                                                           |
    ==================================================================================================================


CLASS - work.testbench_pkg/\testbench_pkg test \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    81.818% |
    |--------------------|--------|------------|
    | Statements         |        |     9 / 11 |
    | Subprograms        |        |      4 / 6 |
    ============================================
    WEIGHTED AVERAGE: 81.818%


    STATEMENT COVERAGE
    ==================================================================================
    | Line |   Hits    |                       Source: test.sv                       |
    |------|-----------|-------------------------------------------------------------|
    | 1    |           | class test extends uvm_test;                                |
    | 2    | UNR,UNR,1 |   `uvm_component_utils(test)                                |
    | 3    |           |                                                             |
    | 4    |           |   env environment;                                          |
    | 5    |           |   rand_sequence seq;                                        |
    | 6    |           |                                                             |
    | 7    |           |                                                             |
    | 8    |           |   function new (string name = "", uvm_component parent);    |
    | 9    |     1     |     super.new(name,parent);                                 |
    | 10   |           |   endfunction : new                                         |
    | 11   |           |                                                             |
    | 12   |           |                                                             |
    | 13   |           |   function void build_phase(uvm_phase phase);               |
    | 14   |     1     |     super.build_phase(phase);                               |
    | 15   |     1     |     environment = env::type_id::create("environment",this); |
    | 16   |           |   endfunction : build_phase                                 |
    | 17   |           |                                                             |
    | 18   |           |   task run_phase(uvm_phase phase);                          |
    | 19   |     1     |     seq = rand_sequence::type_id::create("seq",this);       |
    | 20   |     1     |     phase.raise_objection(this);                            |
    | 21   |     1     |     seq.start(environment.seqr);                            |
    | 22   |           |                                                             |
    | 23   |     1     |     phase.phase_done.set_drain_time(this, 50ns);            |
    | 24   |     1     |     phase.drop_objection(this);                             |
    | 25   |           |                                                             |
    | 26   |           |   endtask : run_phase                                       |
    ==================================================================================


CLASS - work.testbench_pkg/\testbench_pkg sequence_item \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    12.500% |
    |--------------------|--------|------------|
    | Statements         |        |     2 / 16 |
    | Subprograms        |        |      2 / 6 |
    ============================================
    | Branch Coverage    |      1 |     0.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |     0 / 10 |
    | Branches           |        |      0 / 5 |
    ============================================
    WEIGHTED AVERAGE: 6.250%


    STATEMENT COVERAGE
    ====================================================================================================================================================
    | Line |                            Hits                            |                           Source: sequence_item.sv                           |
    |------|------------------------------------------------------------|------------------------------------------------------------------------------|
    | 1    |                                                            | class sequence_item #(parameter int G_LENGTH = 4) extends uvm_sequence_item; |
    | 2    | UNR,UNR,UNR,UNR,UNR,UNR,50,UNR,UNR,UNR,UNR,UNR,UNR,UNR,UNR |   `uvm_object_utils(sequence_item #(G_LENGTH))                               |
    | 3    |                                                            |                                                                              |
    | 4    |                                                            |   rand logic i_en;                                                           |
    | 5    |                                                            |   logic o_is_fizz;                                                           |
    | 6    |                                                            |   logic o_is_buzz;                                                           |
    | 7    |                                                            |   logic [$clog2(G_LENGTH) -1 : 0] o_number;                                  |
    | 8    |                                                            |                                                                              |
    | 9    |                                                            |   function new(string name = "");                                            |
    | 10   |                            161                             |     super.new(name);                                                         |
    | 11   |                                                            |   endfunction : new                                                          |
    | 12   |                                                            |                                                                              |
    ====================================================================================================================================================


    BRANCH COVERAGE
    ===============================
    |  Source: sequence_item.sv   |
    ===============================
    | Branch/Line          | Hits |
    ===============================
    | IF branch#2#1#       |  0/2 |
    |     if_branch        |    0 |
    |     else_branch      |    0 |
    |----------------------|------|
    | IF branch#2#2#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#2#3#       |  0/2 |
    |     if_branch        |    0 |
    |     else_branch      |    0 |
    |----------------------|------|
    | IF branch#2#4#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#2#5#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    ===============================


