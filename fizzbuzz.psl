library ieee;
use ieee.numeric_std.all;

vunit formal_test(fizzbuzz(arch)) {
	--cover temporal conditions(verify sequential functional behavior over period of time)
	--combinatorial (zero-time) conditions can be verified by assertions in VHDL or testbench (cocotb)

	default clock is rising_edge(i_clk);

	--match both reset deassertion and en assertion, but matches may be of different length
	--reset is the asserted for at least 1 and no more than inf non-consectuive iterations
	sequence not_init is {(i_rst = '0') & (i_en ='1') [*1 to inf]; i_rst = '1' [=1 to inf]};

	--after reset assertion, then both reset is held low and en is active but for not
	--necesserily the same amount of time
	sequence init is {i_rst = '1'; (i_rst = '0') & (i_en = '1') [*1 to inf]};

	--not making any assumptions regarding rst and en signals.
	assert_free_rst_en : assert always {cnt/=0 and cnt mod 3 = 0} |-> o_is_fizz = '1';


	--start running(assert en) without going through a reset cycle. Then at some point assert reset
	assert_not_init_fizz : assert always {not_init; cnt /=0 and cnt mod 3 =0} |-> o_is_fizz = '1';
	assert_not_init_buzz : assert always {not_init; cnt /= 0 and cnt mod 5 =0}|-> o_is_buzz = '1';

	--go through a reset cycle and then at deassertion assert en
	assert_fizz : assert always {init; cnt /=0 and cnt mod 3 = 0} |-> o_is_fizz = '1';
	assert_buzz : assert always {init; cnt /=0 and cnt mod 5 = 0} |-> o_is_buzz = '1';

}